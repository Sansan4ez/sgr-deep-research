#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞ (REPL) –¥–ª—è SGRResearchAgent.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è.
"""

import asyncio
import sys
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

from core.agent import SGRResearchAgent
from settings import get_config


class SGRShell:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞ –¥–ª—è SGR –∞–≥–µ–Ω—Ç–∞."""
    
    def __init__(self):
        self.config = get_config(argv=[]).app_config
        self.agent: Optional[SGRResearchAgent] = None
        self.current_task = None
        
    def print_banner(self):
        """–í—ã–≤–æ–¥–∏—Ç –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."""
        print("=" * 60)
        print("üß† SGR Deep Research - Interactive Shell")
        print("=" * 60)
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  /help     - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
        print("  /status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞")
        print("  /sources  - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
        print("  /clear    - –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É")
        print("  /quit     - –í—ã–π—Ç–∏ –∏–∑ –æ–±–æ–ª–æ—á–∫–∏")
        print("  /exit     - –í—ã–π—Ç–∏ –∏–∑ –æ–±–æ–ª–æ—á–∫–∏")
        print()
        print("–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å!")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  ‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã –ò–ò –≤ 2024 –≥–æ–¥—É")
        print("  ‚Ä¢ Research BMW X6 2025 prices in Russia")
        print("  ‚Ä¢ Analyser les tendances du march√© crypto en 2024")
        print("=" * 60)
        print()

    def print_help(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
        print("\nüìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:")
        print("=" * 40)
        print("/help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        print("/status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞")
        print("/sources  - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
        print("/clear    - –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        print("/quit     - –í—ã–π—Ç–∏ –∏–∑ –æ–±–æ–ª–æ—á–∫–∏")
        print("/exit     - –í—ã–π—Ç–∏ –∏–∑ –æ–±–æ–ª–æ—á–∫–∏")
        print()
        print("üí° –°–æ–≤–µ—Ç: –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è!")
        print("–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —è–∑—ã–∫ –∏ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ.")
        print()

    def print_status(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞."""
        if not self.agent:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ!")
            return
            
        print(f"\nü§ñ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞: {self.agent.id}")
        print(f"üìã –ó–∞–¥–∞—á–∞: {self.agent.task}")
        print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {self.agent.state.value}")
        print(f"üîç –ü–æ–∏—Å–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.agent._context.searches_used}")
        print(f"‚ùì –£—Ç–æ—á–Ω–µ–Ω–∏–π –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {self.agent._context.clarifications_used}")
        print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(self.agent._context.sources)}")
        print()

    def print_sources(self):
        """–í—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏."""
        if not self.agent or not self.agent._context.sources:
            print("‚ùå –ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
            return
            
        print(f"\nüìö –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(self.agent._context.sources)}):")
        print("=" * 50)
        for source in self.agent._context.sources.values():
            print(f"  ‚Ä¢ {source}")
        print()

    def clear_agent(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞."""
        if self.agent:
            print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∞–≥–µ–Ω—Ç–∞ {self.agent.id}...")
            self.agent = None
            self.current_task = None
            print("‚úÖ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ!")
        else:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.")

    async def handle_clarification(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —É—Ç–æ—á–Ω–µ–Ω–∏–π –æ—Ç –∞–≥–µ–Ω—Ç–∞."""
        if not self.agent or not self.agent._context.current_state:
            return
            
        current_state = self.agent._context.current_state
        if not hasattr(current_state.function, 'questions'):
            return
            
        print("\n" + "=" * 60)
        print("‚ùì –ê–ì–ï–ù–¢ –ó–ê–ü–†–ê–®–ò–í–ê–ï–¢ –£–¢–û–ß–ù–ï–ù–ò–Ø")
        print("=" * 60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        print("\nüìù –í–æ–ø—Ä–æ—Å—ã:")
        for i, question in enumerate(current_state.function.questions, 1):
            print(f"  {i}. {question}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—è—Å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        if hasattr(current_state.function, 'unclear_terms') and current_state.function.unclear_terms:
            print(f"\n‚ùì –ù–µ—è—Å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {', '.join(current_state.function.unclear_terms)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è
        if hasattr(current_state.function, 'assumptions') and current_state.function.assumptions:
            print(f"\nüí≠ –í–æ–∑–º–æ–∂–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏:")
            for assumption in current_state.function.assumptions:
                print(f"  ‚Ä¢ {assumption}")
        
        print("\n" + "-" * 40)
        print("üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è:")
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        clarification = input("> ").strip()
        
        if clarification:
            print(f"\n‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è: {clarification}")
            await self.agent.provide_clarification(clarification)
        else:
            print("\n‚ö†Ô∏è  –£—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º...")
            await self.agent.provide_clarification("–ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–æ—á–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

    async def execute_research(self, query: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º."""
        print(f"\nüîç –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {query}")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        self.agent = SGRResearchAgent(task=query, config=self.config)
        self.current_task = query
        
        print(f"ü§ñ –°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç: {self.agent.id}")
        print(f"üìä –ú–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤: {self.config.execution.max_steps}")
        print(f"üîç –ú–∞–∫—Å–∏–º—É–º –ø–æ–∏—Å–∫–æ–≤: {self.agent.max_searches}")
        print(f"‚ùì –ú–∞–∫—Å–∏–º—É–º —É—Ç–æ—á–Ω–µ–Ω–∏–π: {self.agent.max_clarifications}")
        print()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        task = asyncio.create_task(self.agent.execute())
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        while not task.done():
            await asyncio.sleep(0.1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è
            if self.agent.state.value == "waiting_for_clarification":
                await self.handle_clarification()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await task
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
            return
        
        print("\n" + "=" * 60)
        print("‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(self.agent._context.sources)}")
        print(f"üîç –ü–æ–∏—Å–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.agent._context.searches_used}")
        print(f"‚ùì –£—Ç–æ—á–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {self.agent._context.clarifications_used}")
        print(f"üìù –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.agent.state.value}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if self.agent._context.sources:
            print(f"\nüìö –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(self.agent._context.sources)}")
            for source in list(self.agent._context.sources.values())[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"  ‚Ä¢ {source}")
            if len(self.agent._context.sources) > 3:
                print(f"  ... –∏ –µ—â–µ {len(self.agent._context.sources) - 3} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        print("\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sources –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞")
        print("üí° –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–≤ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        print("=" * 60)

    async def process_command(self, line: str) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ–±–æ–ª–æ—á–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."""
        line = line.strip()
        
        if not line:
            return True
            
        if line.startswith('/'):
            cmd = line[1:].lower()
            
            if cmd in ['quit', 'exit']:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                return False
            elif cmd == 'help':
                self.print_help()
            elif cmd == 'status':
                self.print_status()
            elif cmd == 'sources':
                self.print_sources()
            elif cmd == 'clear':
                self.clear_agent()
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
                print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
        else:
            # –≠—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
            await self.execute_research(line)
        
        return True

    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –æ–±–æ–ª–æ—á–∫—É."""
        self.print_banner()
        
        try:
            while True:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    line = input("üîç sgr> ").strip()
                    
                    if not await self.process_command(line):
                        break
                        
                except KeyboardInterrupt:
                    print("\n\n‚èπÔ∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quit –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
                    continue
                except EOFError:
                    print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                    
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) > 1:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–∞–∫ –∑–∞–ø—Ä–æ—Å
        query = " ".join(sys.argv[1:])
        shell = SGRShell()
        asyncio.run(shell.execute_research(query))
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –æ–±–æ–ª–æ—á–∫—É
        shell = SGRShell()
        asyncio.run(shell.run())


if __name__ == "__main__":
    main()
